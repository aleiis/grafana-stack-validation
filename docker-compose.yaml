services:

  ##### WASAPhoto #####

  database:
    image: mysql
    container_name: mysql-database
    restart: always
    environment:
      MYSQL_DATABASE: 'wasaphoto'
      MYSQL_USER: 'admin'
      MYSQL_PASSWORD: 'admin'
      MYSQL_ROOT_PASSWORD: 'root'
    ports:
      - "3306:3306"
    volumes:
      - mysql-database:/var/lib/mysql
      - ./mysql-exporter-permissions.sql:/docker-entrypoint-initdb.d/mysql-exporter-permissions.sql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  backend:
    image: docker.io/aleiis/wasaphoto-backend
    container_name: wasaphoto-backend
    ports:
      - "3000:3000"
    environment:
      - WASAPHOTO_CONFIG_FILE=/app/config.yml
    volumes:
      - ./wasaphoto-config.yaml:/app/config.yml
      - wasaphoto-data:/app/wasaphoto
      - wasaphoto-bin:/app/bin
    command: ["sh", "-c", "cp /app/webapi /app/bin/webapi && /app/bin/webapi"]
    depends_on:
      database:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  frontend:
    image: docker.io/aleiis/wasaphoto-frontend
    container_name: wasaphoto-frontend
    ports:
      - "9191:80"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  ##### METRICS #####

  # cAdvisor (short for container Advisor) analyzes and exposes 
  # resource usage and performance data from running containers. 
  # cAdvisor analyzes all the Docker containers that are executing
  # in the same host as cAdvisor. It's not necessary to manually 
  # configure cAdvisor for each container, it already has access 
  # to the whole Docker system.   
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro

  database-exporter:
    image: prom/mysqld-exporter
    container_name: database-exporter
    restart: unless-stopped
    command: 
      - --mysqld.address=database:3306
      - --mysqld.username=exporter
    environment:
      MYSQLD_EXPORTER_PASSWORD: "exporter"
    ports:
      - "9104:9104"
    depends_on:
      database:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus-config.yaml
    volumes:
    - ./prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml:ro
    - prometheus-data:/prometheus
    depends_on:
    - cadvisor

  cortex:
    image: quay.io/cortexproject/cortex:v1.18.1
    container_name: cortex
    command:
      - -config.file=/config/cortex-config.yaml
    volumes:
      - ./cortex-config.yaml:/config/cortex-config.yaml:ro
    ports:
      - "9009:9009"
    healthcheck:
        test: wget -qO- http://localhost:9009/ready
        interval: 10s
        timeout: 10s
        retries: 3
    restart: unless-stopped

  ##### LOGS #####

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    ports:
      - "12345:12345"
    volumes:
      - "./config.alloy:/etc/alloy/config.alloy"
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - loki

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/config/config.yaml
    command: -config.file=config/config.yaml

  ##### TRACES #####

  # autoinstrumentation-go:
  #   image: otel/autoinstrumentation-go
  #   container_name: autoinstrumentation-go
  #   privileged: true
  #   pid: "host"
  #   environment:
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
  #     - OTEL_GO_AUTO_TARGET_EXE=/app/bin/webapi
  #     - OTEL_SERVICE_NAME=webapi-auto
  #     - OTEL_PROPAGATORS=tracecontext,baggage
  #   volumes:
  #     - wasaphoto-bin:/app/bin/webapi
  #     - /proc:/host/proc
  #   depends_on:
  #     - backend
  #     - tempo

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 4317:4317  # OTLP gRPC receiver
      - 4318:4318  # OTLP http receiver

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
    ports:
      - "14317:4317"  # OTLP gRPC
      - "14318:4318"  # OTLP http

  ##### GRAFANA #####

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: unless-stopped
    environment:
      - TERM=linux
    ports: 
      - '3003:3000'
    volumes:
      - ./grafana:/var/lib/grafana

volumes:
  mysql-database: {}
  wasaphoto-data: {}
  wasaphoto-bin: {}
  prometheus-data: {}
